#!/usr/bin/env bash
set -e

OKUB_INSTALL_PATH=${okub_install_path}
MASTERS=${masters_number}
WORKERS=${workers_number}

printf "\e[1;34m[INFO]\e[m Generate iso.\n";
mkdir -p $${OKUB_INSTALL_PATH}/cache

if [ -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]; then
  # Agent Based install
  for bu in $(ls $${OKUB_INSTALL_PATH}/bu); do
    mkdir -p $${OKUB_INSTALL_PATH}/openshift
    $${OKUB_INSTALL_PATH}/bin/butane $${OKUB_INSTALL_PATH}/bu/$${bu} -o $${OKUB_INSTALL_PATH}/openshift/98-$${bu%%.*}.yaml
  done

  if [[ -d "$${OKUB_INSTALL_PATH}/openshift" ]]; then
    # generate manifests
    $${OKUB_INSTALL_PATH}/bin/openshift-install agent create cluster-manifests --dir $${OKUB_INSTALL_PATH}
  fi

  $${OKUB_INSTALL_PATH}/bin/openshift-install agent create image --dir $${OKUB_INSTALL_PATH}
  cp -pr $${OKUB_INSTALL_PATH}/agent.x86_64.iso $${OKUB_INSTALL_PATH}/cache/rhcos-master.iso
  cp -pr $${OKUB_INSTALL_PATH}/agent.x86_64.iso $${OKUB_INSTALL_PATH}/cache/rhcos-worker.iso
else
  # UPI method
  if [[ -f $${OKUB_INSTALL_PATH}/install-config.yaml && ! -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]]; then

    # Create Manifest (needed for SNO since no agent-config.yaml)
    $${OKUB_INSTALL_PATH}/bin/openshift-install create manifests --dir $${OKUB_INSTALL_PATH}

    for bu in $(ls $${OKUB_INSTALL_PATH}/bu); do
      mkdir -p $${OKUB_INSTALL_PATH}/openshift
      $${OKUB_INSTALL_PATH}/bin/butane $${OKUB_INSTALL_PATH}/bu/$${bu} -o $${OKUB_INSTALL_PATH}/openshift/98-$${bu%%.*}.yaml
    done

    # Ignition
    $${OKUB_INSTALL_PATH}/bin/openshift-install create single-node-ignition-config --dir $${OKUB_INSTALL_PATH}
  fi

  if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-live.iso ]; then
    # issue with OKD 4.16, 4.17 and 4.18
    if [[ $($${OKUB_INSTALL_PATH}/bin/openshift-install version | grep -e "4.16.*-okd-*") ]]; then
      URL_COREOS_ISO=https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/4.16/4.16.3/rhcos-4.16.3-x86_64-live.x86_64.iso
    elif [[ $($${OKUB_INSTALL_PATH}/bin/openshift-install version | grep -e "4.17.*-okd-*") ]]; then
      URL_COREOS_ISO=https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/4.17/4.17.17/rhcos-4.17.17-x86_64-live.x86_64.iso
    elif [[ $($${OKUB_INSTALL_PATH}/bin/openshift-install version | grep -e "4.18.*-okd-*") ]]; then
      URL_COREOS_ISO=https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/4.18/4.18.1/rhcos-4.18.1-x86_64-live.x86_64.iso
    else
      URL_COREOS_ISO=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.iso.disk.location)
    fi
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_ISO##*/} as rhcos-live.iso\n";
    curl -Ls $${URL_COREOS_ISO} -o $${OKUB_INSTALL_PATH}/cache/rhcos-live.iso
  fi
  if [ $${MASTERS} -eq 1 ] && [ $${WORKERS} -eq 0 ]; then
      WHICH_IGNITION=bootstrap-in-place-for-live-iso.ign
  else
      WHICH_IGNITION=bootstrap.ign
  fi

  #if [[ -f $${OKUB_INSTALL_PATH}/bu/create-a-partition-for-lvmstorage.bu ]]; then
  #  # Create a partition for LVM storage
  #  $${OKUB_INSTALL_PATH}/bin/butane $${OKUB_INSTALL_PATH}/bu/create-a-partition-for-lvmstorage.bu -r -o $${OKUB_INSTALL_PATH}/partition.ign
  #  jq -s '.[0] * .[1]' $${OKUB_INSTALL_PATH}/$${WHICH_IGNITION} $${OKUB_INSTALL_PATH}/partition.ign | jq -c . > $${OKUB_INSTALL_PATH}/$${WHICH_IGNITION}.new
  #  jq -s '.[0] * .[1]' $${OKUB_INSTALL_PATH}/worker.ign $${OKUB_INSTALL_PATH}/partition.ign | jq -c . > $${OKUB_INSTALL_PATH}/worker.ign.new
  #  mv $${OKUB_INSTALL_PATH}/$${WHICH_IGNITION}.new $${OKUB_INSTALL_PATH}/$${WHICH_IGNITION}
  #  mv $${OKUB_INSTALL_PATH}/worker.ign.new $${OKUB_INSTALL_PATH}/worker.ign
  #fi

  cp -pr $${OKUB_INSTALL_PATH}/cache/rhcos-live.iso $${OKUB_INSTALL_PATH}/cache/rhcos-master.iso
  cp -pr $${OKUB_INSTALL_PATH}/cache/rhcos-live.iso $${OKUB_INSTALL_PATH}/cache/rhcos-worker.iso
  export COREOS_INSTALLER="podman run --privileged --pull always --rm -v /dev:/dev -v $${OKUB_INSTALL_PATH}:/data -w /data quay.io/coreos/coreos-installer:release"
  $${COREOS_INSTALLER} iso ignition embed -fi "$${WHICH_IGNITION}" "cache/rhcos-master.iso"
  $${COREOS_INSTALLER} iso ignition embed -fi "worker.ign" "cache/rhcos-worker.iso"
fi

printf "\e[1;32m[OK]\e[m RHCOS iso generated with ignition.\n"