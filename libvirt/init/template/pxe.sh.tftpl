#!/usr/bin/env bash
set -e

OKUB_INSTALL_PATH=${okub_install_path}
MASTERS=${masters_number}
WORKERS=${workers_number}
DHCP_BOOL=${dhcp_bool}
INTERFACE=${network_interface}
PXE_SERVER=${pxe_server_ip}
OCP_VERSION=${ocp_version}

printf "\e[1;34m[INFO]\e[m Generate PXE boot files\n";

if [ -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]; then
    # Agent Based 
    $${OKUB_INSTALL_PATH}/bin/openshift-install agent create pxe-files --dir $${OKUB_INSTALL_PATH}
else
    # UPI method
    URL_COREOS_KERNEL=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.kernel.location)
    URL_COREOS_INITRAMFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.initramfs.location)
    URL_COREOS_ROOTFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.rootfs.location)

    mkdir -p $${OKUB_INSTALL_PATH}/boot-artifacts

    # Kernel
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_KERNEL##*/}\n";
    curl -Ls $${URL_COREOS_KERNEL} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz
    fi

    # Initramfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_INITRAMFS##*/}\n";
    curl -Ls $${URL_COREOS_INITRAMFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img
    fi

    # Rootfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_ROOTFS##*/}\n";
    curl -Ls $${URL_COREOS_ROOTFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img
    fi

    # Config
    if [ $${MASTERS} -eq 1 ] && [ $${WORKERS} -eq 0 ]; then
        WHICH_IGNITION=bootstrap-in-place-for-live-iso.ign
    else
        WHICH_IGNITION=bootstrap.ign
    fi

    if [ "$${DHCP_BOOL}" != "false" ]; then NETWORK_CONFIG="ip=$${INTERFACE}:dhcp"; fi

fi


#### Common part #####

# qcow2
URL_COREOS_QCOW2=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats["qcow2.gz"].disk.location')

mkdir -p $${OKUB_INSTALL_PATH}/cache

if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz ]; then
printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_QCOW2##*/} as rhcos-qemu.x86_64.qcow2.gz\n";
curl -Ls $${URL_COREOS_QCOW2} -o $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
gunzip -f -d $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
fi

# treeinfo
    cat > "$${OKUB_INSTALL_PATH}/treeinfo" <<EOF
[general]
arch = x86_64
family = Red Hat CoreOS
platforms = x86_64
version = $${OCP_VERSION}
[images-x86_64]
initrd = agent.x86_64-initrd.img
kernel = agent.x86_64-vmlinuz
EOF

    # pxeboot.conf
    cat > "$${OKUB_INSTALL_PATH}/pxeboot.conf" <<EOF
DEFAULT pxeboot
TIMEOUT 20
PROMPT 0
LABEL pxeboot
    KERNEL http://$${PXE_SERVER}/agent.x86_64-vmlinuz 
    APPEND initrd=http://$${PXE_SERVER}/agent.x86_64-initrd.img coreos.live.rootfs_url=http://$${PXE_SERVER}/agent.x86_64-rootfs.img coreos.inst.install_dev=/dev/vda coreos.inst.ignition_url=http://$${PXE_SERVER}/$${WHICH_IGNITION} $${NETWORK_CONFIG}
EOF

printf "\e[1;32m[OK]\e[m PXE config generated and iso downloaded.\n"