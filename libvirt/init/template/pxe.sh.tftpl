#!/usr/bin/env bash
set -e

OKUB_INSTALL_PATH=${okub_install_path}
MASTERS=${masters_number}
WORKERS=${workers_number}
DHCP_BOOL=${dhcp_bool}
INTERFACE=${network_interface}
PXE_SERVER=${pxe_server_ip}
OCP_VERSION=${ocp_version}
PRODUCT=${product}

printf "\e[1;34m[INFO]\e[m Generate PXE boot files\n";

if [ -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]; then
    # Agent Based
    yq -i '.bootArtifactsBaseURL="http://${pxe_server_ip}:8000/boot-artifacts"' $${OKUB_INSTALL_PATH}/agent-config.yaml
    $${OKUB_INSTALL_PATH}/bin/openshift-install agent create pxe-files --dir $${OKUB_INSTALL_PATH}
    
    #$${OKUB_INSTALL_PATH}/bin/openshift-install create manifests --dir $${OKUB_INSTALL_PATH}
    #$${OKUB_INSTALL_PATH}/bin/openshift-install create ignition-configs --dir $${OKUB_INSTALL_PATH}

else
    # UPI method
    URL_COREOS_KERNEL=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.kernel.location)
    URL_COREOS_INITRAMFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.initramfs.location)
    URL_COREOS_ROOTFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.rootfs.location)

    mkdir -p $${OKUB_INSTALL_PATH}/boot-artifacts

    # Kernel
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_KERNEL##*/}\n";
    curl -Ls $${URL_COREOS_KERNEL} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz
    fi

    # Initramfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_INITRAMFS##*/}\n";
    curl -Ls $${URL_COREOS_INITRAMFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img
    fi

    # Rootfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_ROOTFS##*/}\n";
    curl -Ls $${URL_COREOS_ROOTFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img
    fi

    # Config
    if [ $${MASTERS} -eq 1 ] && [ $${WORKERS} -eq 0 ]; then
        WHICH_IGNITION=bootstrap-in-place-for-live-iso.ign
    else
        WHICH_IGNITION=bootstrap.ign
    fi

fi


#### Common part #####

# Network config
if [ "$${DHCP_BOOL}" != "false" ]; then NETWORK_CONFIG="ip=$${INTERFACE}:dhcp"; fi

# Download images in cache
mkdir -p $${OKUB_INSTALL_PATH}/cache

if [ $${PRODUCT} == okd ]; then
    URL_COREOS_QCOW2=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats["qcow2.xz"].disk.location')
    if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2 ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_QCOW2##*/} as rhcos-qemu.x86_64.qcow2.xz\n";
    curl -Ls $${URL_COREOS_QCOW2} -o $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.xz
    xz --decompress $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.xz
    fi

    URL_COREOS_RAW=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats["raw.xz"].disk.location')
    if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_RAW##*/} as rhcos-metal.x86_64.raw.xz\n";
    curl -Ls $${URL_COREOS_RAW} -o $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.xz
    xz --decompress $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.xz
    fi

elif [ $${PRODUCT} == ocp ]; then
    URL_COREOS_QCOW2=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats["qcow2.gz"].disk.location')
    if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2 ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_QCOW2##*/} as rhcos-qemu.x86_64.qcow2.gz\n";
    curl -Ls $${URL_COREOS_QCOW2} -o $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
    gunzip -f -d $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
    fi

    URL_COREOS_RAW=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats["raw.gz"].disk.location')
    if [ ! -f $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_RAW##*/} as rhcos-metal.x86_64.raw.gz\n";
    curl -Ls $${URL_COREOS_RAW} -o $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.gz
    gunzip -f -d $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.gz
    fi
fi

# KVM TFTP
if [ -f /etc/debian_version ]; then
    sudo apt-get update
    sudo apt-get install -y pxelinux syslinux tftpd-hpa

    sudo mkdir -p /var/lib/tftpboot/pxelinux.cfg
    sudo chown -R nobody:nogroup /var/lib/tftpboot
    sudo chmod -R 777 /var/lib/tftpboot

    sudo cp -v /usr/lib/PXELINUX/pxelinux.0 /var/lib/tftpboot/
    sudo cp -v /usr/lib/syslinux/modules/efi64/menu.c32 /var/lib/tftpboot/
    sudo cp -v /usr/lib/syslinux/modules/efi64/mboot.c32 /var/lib/tftpboot/
    sudo cp -v /usr/lib/syslinux/modules/efi64/chain.c32 /var/lib/tftpboot/
    sudo cp -v /usr/lib/syslinux/modules/efi64/ldlinux.e64 /var/lib/tftpboot/
    sudo cp -v /usr/lib/syslinux/modules/efi64/libutil.c32 /var/lib/tftpboot/

    sudo systemctl enable --now tftpd-hpa.service

elif [ -f /etc/redhat-release ]; then
    sudo yum install -y tftp-server syslinux-tftpboot

    sudo mkdir -p /var/lib/tftpboot/pxelinux.cfg
    sudo cp -v /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/
    sudo cp -v /usr/share/syslinux/menu.c32 /var/lib/tftpboot/
    sudo cp -v /usr/share/syslinux/mboot.c32 /var/lib/tftpboot/
    sudo cp -v /usr/share/syslinux/chain.c32 /var/lib/tftpboot/
    sudo cp -v /usr/share/syslinux/ldlinux.c32 /var/lib/tftpboot/
    sudo cp -v /usr/share/syslinux/libutil.c32 /var/lib/tftpboot/
    sudo mkdir -p /var/lib/tftpboot/rhcos
    sudo chown -R nobody:nobody /var/lib/tftpboot
    sudo chmod -R 777 /var/lib/tftpboot

    sudo systemctl enable --now tftp.service
    sudo firewall-cmd --add-service=tftp --permanent
    sudo firewall-cmd --reload
fi


# treeinfo
    cat > "$${OKUB_INSTALL_PATH}/boot-artifacts/.treeinfo" <<EOF
[general]
arch = x86_64
family = Red Hat CoreOS
platforms = x86_64
version = $${OCP_VERSION}
[images-x86_64]
initrd = agent.x86_64-initrd.img
kernel = agent.x86_64-vmlinuz
EOF

# pxeboot.conf
cat > "$${OKUB_INSTALL_PATH}/boot-artifacts/rhel-doc-example-of-pxelinux.cfg" <<EOF
DEFAULT pxeboot
TIMEOUT 20
PROMPT 0
LABEL pxeboot
    KERNEL http://$${PXE_SERVER}/agent.x86_64-vmlinuz 
    APPEND initrd=http://$${PXE_SERVER}/agent.x86_64-initrd.img coreos.live.rootfs_url=http://$${PXE_SERVER}/agent.x86_64-rootfs.img coreos.inst.install_dev=/dev/vda coreos.inst.ignition_url=http://$${PXE_SERVER}/$${WHICH_IGNITION} $${NETWORK_CONFIG}
EOF

# local pxeboot for KVM
cat > /var/lib/tftpboot/pxelinux.cfg/default << EOF
default menu.c32
prompt 0
timeout 30
menu title PXE Menu

label 1
menu label ^1) Boot from local drive
localboot 0x00

label 2
menu label ^2) Install Master
KERNEL $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz
APPEND initrd=$${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img,$${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img coreos.inst.install_dev=/dev/vda coreos.inst.image_url=http://$${PXE_SERVER}/rhcos-metal.x86_64.raw coreos.inst.ignition_url=http://$${PXE_SERVER}:8000/master.ign

label 3
menu label ^3) Install Worker
KERNEL $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz
APPEND initrd=$${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img,$${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img coreos.inst.install_dev=/dev/vda coreos.inst.image_url=http://$${PXE_SERVER}/rhcos-metal.x86_64.raw coreos.inst.ignition_url=http://$${PXE_SERVER}:8000/worker.ign
EOF


printf "\e[1;32m[OK]\e[m PXE config generated and raw image downloaded.\n"
