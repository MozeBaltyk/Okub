#!/usr/bin/env bash
set -e

OKUB_INSTALL_PATH=${okub_install_path}
MASTERS=${masters_number}
WORKERS=${workers_number}
DHCP_BOOL=${dhcp_bool}
INTERFACE=${network_interface}
PXE_SERVER=${pxe_server_ip}
OCP_VERSION=${ocp_version}
PRODUCT=${product}

printf "\e[1;34m[INFO]\e[m Generate PXE boot files\n";

if [ -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]; then
    # Agent Based
    $${OKUB_INSTALL_PATH}/bin/openshift-install agent create pxe-files --dir $${OKUB_INSTALL_PATH}

    # boot.ipxe
    cat > "$${OKUB_INSTALL_PATH}/boot-artifacts/boot.ipxe" <<EOF
#!ipxe
initrd --name initrd agent.x86_64-initrd.img
kernel agent.x86_64-vmlinuz initrd=initrd coreos.live.rootfs_url=http://$${PXE_SERVER}:8000/boot-artifacts/agent.x86_64-rootfs.img mitigations=auto,nosmt ignition.firstboot ignition.platform.id=metal
boot
EOF

else
    # UPI method
    if [ -f $${OKUB_INSTALL_PATH}/install-config.yaml && ! -f $${OKUB_INSTALL_PATH}/agent-config.yaml ]; then
      # Create Manifest (needed for SNO since no agent-config.yaml)
      $${OKUB_INSTALL_PATH}/bin/openshift-install create manifests --dir $${OKUB_INSTALL_PATH}
      # Ignition
      $${OKUB_INSTALL_PATH}/bin/openshift-install create single-node-ignition-config --dir $${OKUB_INSTALL_PATH}
    fi

    URL_COREOS_KERNEL=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.kernel.location)
    URL_COREOS_INITRAMFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.initramfs.location)
    URL_COREOS_ROOTFS=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r .architectures.x86_64.artifacts.metal.formats.pxe.rootfs.location)

    mkdir -p $${OKUB_INSTALL_PATH}/boot-artifacts

    # Kernel
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_KERNEL##*/}\n";
    curl -Ls $${URL_COREOS_KERNEL} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz
    fi

    # Initramfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_INITRAMFS##*/}\n";
    curl -Ls $${URL_COREOS_INITRAMFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/$${URL_COREOS_INITRAMFS##*/}
    fi

    # Rootfs
    if [ ! -f $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_ROOTFS##*/}\n";
    curl -Ls $${URL_COREOS_ROOTFS} -o $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-rootfs.img
    fi

    # Config
    if [ $${MASTERS} -eq 1 ] && [ $${WORKERS} -eq 0 ]; then
        WHICH_IGNITION=bootstrap-in-place-for-live-iso.ign
    else
        WHICH_IGNITION=bootstrap.ign
    fi

    # boot.ipxe
    cat > "$${OKUB_INSTALL_PATH}/boot-artifacts/boot.ipxe" <<EOF
#!ipxe
initrd --name initrd agent.x86_64-initrd.img
kernel agent.x86_64-vmlinuz initrd=initrd ip=dhcp rd.neednet=1 coreos.inst.install_dev=/dev/vdb coreos.live.rootfs_url=http://$${PXE_SERVER}:8000/boot-artifacts/agent.x86_64-rootfs.img coreos.inst.ignition_url=http://$${PXE_SERVER}:8000/bootstrap-in-place-for-live-iso.ign mitigations=auto,nosmt ignition.firstboot ignition.platform.id=metal
boot
EOF

fi

#### Common part #####

# Download images in cache
mkdir -p $${OKUB_INSTALL_PATH}/cache

if [ $${PRODUCT} == okd ]; then
    PATH_COREOS_RAW="$${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.xz"
    PATH_COREOS_QCOW2="$${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.xz"

    URL_COREOS_QCOW2=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats["qcow2.xz"].disk.location')
    if [ ! -f $${PATH_COREOS_QCOW2} ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_QCOW2##*/} as rhcos-qemu.x86_64.qcow2.xz\n";
    curl -Ls $${URL_COREOS_QCOW2} -o $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.xz
    #xz --decompress $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.xz
    fi

    URL_COREOS_RAW=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats["raw.xz"].disk.location')
    if [ ! -f $${PATH_COREOS_RAW} ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_RAW##*/} as rhcos-metal.x86_64.raw.xz\n";
    curl -Ls $${URL_COREOS_RAW} -o $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.xz
    #xz --decompress $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.xz
    fi

elif [ $${PRODUCT} == ocp ]; then
    PATH_COREOS_RAW="$${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.gz"
    PATH_COREOS_QCOW2="$${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz"

    URL_COREOS_QCOW2=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.qemu.formats["qcow2.gz"].disk.location')
    if [ ! -f $${PATH_COREOS_QCOW2} ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_QCOW2##*/} as rhcos-qemu.x86_64.qcow2.gz\n";
    curl -Ls $${URL_COREOS_QCOW2} -o $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
    #gunzip -f -d $${OKUB_INSTALL_PATH}/cache/rhcos-qemu.x86_64.qcow2.gz
    fi

    URL_COREOS_RAW=$($${OKUB_INSTALL_PATH}/bin/openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats["raw.gz"].disk.location')
    if [ ! -f $${PATH_COREOS_RAW} ]; then
    printf "\e[1;34m[INFO]\e[m Download $${URL_COREOS_RAW##*/} as rhcos-metal.x86_64.raw.gz\n";
    curl -Ls $${URL_COREOS_RAW} -o $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.gz
    #gunzip -f -d $${OKUB_INSTALL_PATH}/cache/rhcos-metal.x86_64.raw.gz
    fi
fi

# KVM TFTP
if [ -f /etc/debian_version ]; then
    # iPXE
    sudo apt-get install -y ipxe
    sudo mkdir -p /var/lib/tftpboot/
    sudo cp /usr/lib/ipxe/ipxe.pxe /var/lib/tftpboot/
    sudo cp /usr/lib/ipxe/undionly.kpxe /var/lib/tftpboot/undionly.0
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/boot.ipxe /var/lib/tftpboot/boot.ipxe
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img /var/lib/tftpboot/agent.x86_64-initrd.img
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz /var/lib/tftpboot/agent.x86_64-vmlinuz
    sudo chown -R nobody:nogroup /var/lib/tftpboot
    sudo chmod -R 777 /var/lib/tftpboot
elif [ -f /etc/redhat-release ]; then
    # iPXE
    sudo yum install -y ipxe-bootimgs
    sudo cp /usr/share/ipxe/ipxe-x86_64.efi /var/lib/tftpboot/
    sudo cp /usr/share/ipxe/undionly.kpxe /var/lib/tftpboot/undionly.0
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/boot.ipxe /var/lib/tftpboot/boot.ipxe
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-initrd.img /var/lib/tftpboot/agent.x86_64-initrd.img
    sudo cp $${OKUB_INSTALL_PATH}/boot-artifacts/agent.x86_64-vmlinuz /var/lib/tftpboot/agent.x86_64-vmlinuz
    sudo chown -R nobody:nobody /var/lib/tftpboot
    sudo chmod -R 777 /var/lib/tftpboot
fi

printf "\e[1;32m[OK]\e[m PXE config generated and raw image downloaded.\n"
